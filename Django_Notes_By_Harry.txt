
>>>>>>>>>>>>>>>>>>>>>>>>  Django Notes  <<<<<<<<<<<<<<<<<<<<<<<<<<<


pip intall django : to install django

python -m pip install django : to install in the current python version

python -m django --version : to check the version of django

browse python project -> django-admin : to check the list of commands

django-admin startproject "name of project" : to create a new project

python manage.py runserver : to run the website on the server

127.0.0.1:8000 : local server of django

create a "views.py" file to render different views

from . import views : to use functions present in "views.py" file. "." refers to the current folder.

Whenever a method is to be added, it must be registered into the "urls.py" file first.

in urls.py :

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',views.index,name='index'),  # add this
]

It specifies home directory where index function needs to be called and in code, we would use it
by the name "index" as when we would require redirection to a page, we would use this name "index" :


from django.shortcuts import redirect

return redirect('index')


In views, create :

def index():
    return "hello"

But this will give error because request and response objects are required such as :



from django.http import HttpResponse

def index(request):
    return HttpResponse("hello")

HTML content can also be placed such as :

return HttpResponse("<h1>hello</h1>")

To use templates, create a folder on the same path as that of "manage.py" and in "settings.py", add
the same name in the list as :


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],  # >>>>>>>>> this way <<<<<<<<<<<<<

To use templates, we need to import and return "render" because this time we are sending an html file
as response instead of content

from django.shortcuts import render

def index(request):
 return render(request,'index.html')


<form action="/about" method="get"> : action refers to the method present in the view

Supplying name to the tags helps to fetch the values from the URLs when the form is submitted.

print(request.GET.get('txtIndex')) : to pick the value of the html tag from the URL
						      and use it in the code.

print(request.GET.get('txtIndex','no value found')) : if the value is not found, we can pass a default
						      value

In case of checkbox, "on" is retrieved by django if it was selected otherwise "None". In case, it was
not checked, the value is not shown in the URL.

request.GET.get() : it is used to retrieve values from the template

{{value1}} : it is used to retrieve values from the view. View must supply the values in the form of 
	     "dict" only.

By default, a GET request is issued. It is not safe to issue a GET request because the data sent
through a GET request can be seen through URL and few servers can't handle it. So, use a POST request.

After issuing a POST request through the form, tags values are retrieved using 

request.POST.get()  method


<pre></pre> : to render the content as it is (including spaces)

<a href="path" download="name"></a> : to download a file 

{% csrf_token %} : used to describe that the request is coming from the same website only. It is used
                   if the "method" attribute of the "form" is "post".

python manage.py runserver "any port" : to run the server on any manual port 

ctrl+c : to stop the running server

>>>>>>>>>>>>>>>>>>>>>>>> Creating an App  <<<<<<<<<<<<<<<<<<<<<<<<<<<

python manage.py startapp "name of the app" : app is a part of the project. A project may have any 
					      number of apps.

from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('shop/', include('shop.urls')),
]


"include" means after reaching "shop", search in "shop.urls".

create "templates" folder in the app and inside this folder, create another folder with the same name
as that of app.

add the name of the app in the project -> settings.py -> installed_apps as :

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'shop',
]


"static" folder is required in an app to keep the static files such as images.


Add the following in the "settings.py" file of the project :

STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]


create a folder named "static" on the same path where "templates" folder exists. In the html file,

first use {% load static %} to inform that static content would be used

and then <a href="{% static 'blog/myfile.txt' %}" >Click To Load</a> 

where 'blog/myfile.txt' is the path of the file present in "static" folder

This will inform the project to pick the static contents from the above mentioned path.


python manage.py migrate : to store the changes permanently in the database from the migrations file
			   (it needs to be run for the first time to create the tables first)

python manage.py makemigrations : to store the changes in migrations file (tables structure required
				   in the app)

create a class inside Models

from django.db import models

class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    product_name = models.CharField(max_length=50)
    desc = models.CharField(max_length=300)
    pub_date = models.DateField()


Once "migrate" command is issued, change the name of the app from 'shop' to 'shop.apps.ShopConfig'
hence making sure that the class name is there in the "INSTALLED_APPS" list in "settings.py" otherwise
the "makemigrations" and "migrate" commands would not detect any changes in the models.


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'shop.apps.ShopConfig',
]

python manage.py createsuperuser : to create a superuser to manage the admin panel

username : akaroshaa   password : roshaa

username : admin   password : admin

127.0.0.1:8000/admin : to visit the admin panel

We need to register the created class into the "admin.py" so that it can be seen and managed in the
admin panel of the website

from .models import Product

admin.site.register(Product)


Whenever the model is changed, django may stop us during the "makemigrations" command as there may be
records already which would not have the values of the upcoming fields, so we need to pass a default 
value along with the type of fields so that those values get that default value.


class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    product_name = models.CharField(max_length=50,default="")
    desc = models.CharField(max_length=300,default="")
    pub_date = models.DateField()
    price = models.IntegerField(default=0)    			      # newly added
    image = models.ImageField(upload_to='shop/images',default="")     # newly added
    

shop in "shop/images" refers to the name of the app


We need to override the __str__ function so as to get the name of the product displayed


class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    product_name = models.CharField(max_length=50)
    desc = models.CharField(max_length=300)
    pub_date = models.DateField()
    price = models.IntegerField(default=0)
    image = models.ImageField(upload_to='shop/images', default="")

    def __str__(self):
        return self.product_name


To properly manage media, in "settings.py", add :


MEDIA_ROOT = os.path.join(BASE_DIR,'media')   # name (media) with which the folder will be created
MEDIA_URL = '/media/'

then in the "urls.py" file of the project, add : 


from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('shop/', include('shop.urls')),
    path('blog/', include('blog.urls')),
] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)   # this thing


python manage.py shell : to run the shell in this path

from shop.models import Product : to import the "Product" class

Product.objects.all() : to retrieve all the products

from django.utils import timezone :  to import timezone

timezone.now  : to get the current date and time

prod = Product(product_name="mouse",desc="Logitech",pub_date=timezone.now,price=12)  : 

to create an instance 

prod.save() : to save into database

# testing our product on shell

prod.product_name : to check the name of the product just added

Product.objects.get(product_name='mouse') : to retrieve a product whose name is 'mouse'

{% extends 'shop/basic.html' %} : to copy all the HTML content of a page

<title>

        {% block title  %}   : to create a template which will be filled by the inheriting pages.
			       So, no need to fill it in the master page.

        {% endblock %}

</title>


In inheriting pages :
 
{% block title  %}    
		
Title of child page	     :  Definition is provided in the child page and no need to type all the
				basic HTML code once again. Child page will only have the blocks filled
				into it and not the HTML

{% endblock %}


If the block is not filled by the child page, it will not be rendered but there will be no error on
the page.

{% load static %} : should not be there in the master page as there can be chances when we don't want
to load the static content.


To reduce the code, use :


def index(request):
    products = Product.objects.all()
    print(products)
    n = len(products)
    nSlides = n//4 + ceil(n/4 - n//4)
    params = {
       'products' : products,
        'range' : range(1,nSlides),
        'nSlides' : nSlides
    }
    return render(request, 'shop/index.html', params)

so that the slides can be counted dynamically.

To load the slides dynamically, use :

 <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
    {% for i in range %}
      <li data-target="#carouselExampleIndicators" data-slide-to="{{i}}" class="active"></li>
    {% endfor %}


Code to render the products dynamically :

    <div class="carousel-item active">


        <!--- Starting of cards -->

        {% for product in products %}
      <div class="col-xs-3 col-sm-3 col-md-3">
        <div class="card" style="width: 18rem;">
  <img src="{% static 'shop/test.jpeg' %}" class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">Card title 2</h5>
    <p class="card-text"></p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>
      </div>

                    {% if forloop.counter|divisibleby:4 and not forloop.counter.last %}

                    <!--      Ending the current slide -->

      </div>

                    <!--      Starting a new slide -->

      <div class="carousel-item">

                    {% endif %}

        {% endfor %}

        <!--- end of cards ------>

    <!--- end of slides --->

    </div>



product.0.name : to access the name of the first product

product.name : to access the name of the current product

Some of the products that can be added :

phone
jeans 
juicer
notebook
saree
pen
pencil
mouse
laptop


"."  :  root directory in python 

"/"  :  root directory in html  

<img src="/media/{{ product.image }}" class="card-img-top" alt="..."> : to render the images from the
database. The path of the image is already stored so we just have to add '/media/' before it.


To adjust the height and width of the images, use :


.col-md-3 img
{
   width: 222px;
   height: 200px;
}


To organize the navigators properly, use "container" class outside the "carousel-inner" class :


<div class="container">
  <div class="container carousel-inner">
    <div class="carousel-item active">
    
	<!--- Code here ---->

    </div>
  </div>
</div>



To render multiple categories of the products as sliders, use :

in "views.py" :

allProducts = [
        [products, range(1, nSlides), len(products)],
        [products, range(1, nSlides), len(products)]
    ]


in html file :


{% for products,range,length in allProducts %}

    <div id="carouselExampleIndicators{{ forloop.counter }}" class="carousel slide" data-ride="carousel">
  <ol class="carousel-indicators">
    <li data-target="#carouselExampleIndicators{{ forloop.counter }}" data-slide-to="0" class="active"></li>

    {% for i in range %}
      <li data-target="#carouselExampleIndicators{{ forloop.parentloop.counter }}" data-slide-to="{{i}}"></li>
    {% endfor %}

  </ol>

<!-------- in the navigators as well -------->

  <a class="carousel-control-prev" href="#carouselExampleIndicators{{ forloop.counter }}" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" href="#carouselExampleIndicators{{ forloop.counter }}" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>




forloop.parentloop.counter : to access the counter value of the parent loop


Logic to show the products categorywise :

 allProducts = []
    catProducts = Product.objects.values('category', 'id')
    categories = {item['category'] for item in catProducts}
    for cat in categories:
        prod = Product.objects.filter(category=cat)
        n = len(prod)
        nSlides = n // 4 + ceil(n / 4 - n // 4)
        allProducts.append([prod, range(1, nSlides), n])


"Product.objects.values('category', 'id')" : This converts the model objects into a list of python 
dict in which only the "category" and "id" will be present as the keys and other attributes will not 
be taken.


"{item['category'] for item in catProducts}" : It picks the distinct categories and returns them.


localStorage.setItem('key','value')  :  JS variable to store the values in the key-value pair format.

localStorage.getItem('key') : To retrieve the variable value using the provided key. Value can be 
				retrieved on other webpages of the same website as well.


Add a JS block inside the basic.html file : 


{% block js  %}

{% endblock %}


console.log('working') : to print something on the console in JS.
 

Atmost 1 "AutoField" typed column can exist in a class hence, it is recommended to use that column only
as the primary key column. If there is no primary key used in the model, django automatically creates
an "id" column with primary key constraint. If we want to use the name "id" as the column name, we
will have to make it primary key otherwise django won't allow to create a field with that name.



Logic to implement "Add to Cart" :


<script>

if(localStorage.getItem('cart') == null)
{
var cart = {};
}
else
{
cart = JSON.parse(localStorage.getItem('cart'));
}


$('.cart').click(function(){

var idstr = this.id.toString();

if(cart[idstr] != undefined)
{
cart[idstr] = cart[idstr] + 1;
}
else
{
cart[idstr] = 1;
}

console.log(cart);

localStorage.setItem('cart',JSON.stringify(cart));

});


</script>



localStorage.clear() : to clear the localStorage data


<span></span> : best to capture any element's value as it doesn't provide any spaces like other tags
		such as <div>, <p>, etc.


$('#cart').html(Object.keys(cart).length) :  to assign the value as the contents of the tag.


Object.keys(cart).length :   to count the number of keys of the 'cart' object.


"popovers" in bootstrap are disabled by default. To enable them, use :


$('#popcart').popover('show')  :    to show on page load

$('#popcart').popover()  :    to show on click

$('#popcart').attr('data-content') :  to get the value of this attribute

$('#popcart').attr('data-content','Hi Roshaa')  :  to change the value of an attribute

attr() can't add any attribute at run time, it can only get or set the value of an existing attribute.

data-html="true" :  needs to be set of the popover so that it can render its content in HTML format.


To make it redirect to a page :  

<a href="/shop/product/{{ product.id }}" id="qv{{ product.id }}" class="btn btn-primary">Quick View</a>


In "urls.py", add a URL and specify that it would require an integer parameter and give it any name :

path('product/<int:myid>', views.product)


Implement "product" view :

def product(request,myid):
    prod = Product.objects.filter(id=myid)[0]
    return render(request, 'shop/product.html',{ 'prod' : prod})


Code to render the product quick view page :

<div class="container my-3">

    <div class="row">

    <div class="col-md-4">
        <img src="/media/{{ prod.image }}" alt="Product Image goes here" />
    </div>


    <div class="col-md-8">
        <p>{{ prod.product_name }}</p>
        <p><b>Rs. {{ prod.price }}</b></p>
        <p>{{ prod.desc }}</p>
    </div>

</div>

</div>


To show the brief description :

<p class="card-text">{{ product.desc|slice:"0:15" }}...</p>


If the form controls have "name" attribute, then only their values will be posted to the server
otherwise not.


Implement contact page as :


Implement a "Contact" class inside "models.py" :


class Contact(models.Model):
    msg_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=50,default="")
    email = models.CharField(max_length=70,default="")
    phone = models.CharField(max_length=70,default="")
    desc = models.CharField(max_length=500,default="")
    

    def __str__(self):
        return self.name

In "views.py" :

from .models import Product,Contact

def contact(request):

    if request.method == "POST":
        name = request.POST.get('name')
        email = request.POST.get('email')
        phone = request.POST.get('phone')
        desc = request.POST.get('desc','no value found')  # default value 'no value found'
							  # in case no value is found at server's end
							  # maybe if "name" attribute is missing
        # print('name = ',name,' email = ',email,' phone = ',phone,' desc = ',desc)
	contact = Contact(name=name,email=email,phone=phone,desc=desc)
        contact.save()

    return render(request, 'shop/contact.html')


To align the items at the center :

initial  :   <div class="card" style="width: 18rem;"> 

changed  :   <div class="card align-items-center" style="width: 18rem;">   

Logic to update the cart :


function updateCart(){
  var cart = JSON.parse(localStorage.getItem('cart'));
    var sum = 0;
    for(var item in cart){
        sum = sum + cart[item];
      }
    $('#cart').html(sum);
}

updateCart();




// to load the cart from a different page or after the current page refresh 


if(localStorage.getItem('cart') == null)
{
  var cart = {};
  localStorage.setItem('cart',JSON.stringify(cart));
}
else
{
  updateCart();
}


Code to generate the buttons dynamically :

// using string interpolation syntax


var embedString = `<button class="btn btn-primary minus" id="minus${idstr}" > - 
                          </button><span id="val${idstr}">${cart[idstr]}</span> 
		   <button class="btn btn-primary plus" id="plus${idstr}" > + </button>`;
            
$('#div'+idstr).html(embedString);


"click" method of jQuery can't handle the events of dynamically generated tags.

"on" method is capable of doing so :



/// using normal click

$('.divpr').on('click','button.minus',function(){

console.log('minus clicked');

   });



/// handling the events of dynamically generated tags


$('.divpr').on('click','button.minus',function(){

console.log('minus clicked');
console.log(this.id);          /// id of the dynamically generated tag

   });


This way, the dynamically generated tag becomes the selector now.

Selector on which the method is called ( "$('.divpr')" in our case ) must be present originally 
inside the DOM.



Logic to implement the increase/decrease the quantity of the products :


$('.divpr').on('click','button.minus',function(){

        var cart = JSON.parse(localStorage.getItem('cart'));
        var key = this.id.slice(5,);
        cart[key] = cart[key] - 1;
        cart[key] = Math.max(0,cart[key]);     // to assign the maximum value between the two numbers
        $('#val'+key).html(cart[key]);
        localStorage.setItem('cart',JSON.stringify(cart));
        updateCart();
	updatePopover();

   });



Logic to fetch the name of any product using its id :


<h5 class="card-title" id="namepr{{ product.id }}">{{ product.product_name }}</h5>



Logic to update the data-content of the popover :


function updatePopover(){

  var cart = JSON.parse(localStorage.getItem('cart'));
  var i = 1;
  var popStr = '';
  for(var item in cart)
  {
    popStr = popStr + '<b>' + i + '. </b>' + $('#name'+item).html() + ' , <b>Qty</b> : ' + cart[item] + '<br>';
    i = i + 1;
  }
  $('#popcart').attr('data-content',popStr);
  $('#popcart').popover('show');
}

updatePopover();




Complete code of click of "Add to Cart" to increase/decrease the quantity :


$('.cart').click(function(){

      var cart = JSON.parse(localStorage.getItem('cart'));
      var idstr = this.id.toString();
      if(cart[idstr] != undefined)
      {
          cart[idstr] = cart[idstr] + 1;
      }
      else
      {
          cart[idstr] = 1;
      }

      localStorage.setItem('cart',JSON.stringify(cart));
      updateCart();
      updatePopover();
      var embedString = `<button class="btn btn-primary minus" id="minus${idstr}" > - 
                          </button> <span id="val${idstr}">${cart[idstr]} </span> <button class="btn btn-primary plus" id="plus${idstr}" > + </button>`;
      
      $('#div'+idstr).html(embedString);


});  // end of click



Code for clearCart :



function clearCart() {
  
var cart = JSON.parse(localStorage.getItem('cart'));
for(var item in cart){
var replaceString = `<button id="${item}" class="btn btn-primary cart">Add To Cart</button>`;
  $('#div'+item).html(replaceString);
}
localStorage.clear();
cart = {};
localStorage.setItem('cart',JSON.stringify(cart));
updateCart();
updatePopover();


}



Code to show the checkout and clearCart buttons in the popover, use previous version of bootstrap
and use "popper.js" :



    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>


Final code having everything :



<script>



function updateCart(){

  if(localStorage.getItem('cart') == null)
  {

    var cart = {};
    localStorage.setItem('cart',JSON.stringify(cart));

  }
  else
  {
    
      var cart = JSON.parse(localStorage.getItem('cart'));
      var sum = 0;
      for(var item in cart){
          sum = sum + cart[item];
        }
      $('#cart').html(sum);

  }

}




function clearCart() {
  
    var cart = JSON.parse(localStorage.getItem('cart'));
    for(var item in cart){
    var originalButton = `<button id="${item}" class="btn btn-primary cart">Add To Cart</button>`;
      $('#div'+item).html(originalButton);
    }
    localStorage.clear();
    cart = {};
    localStorage.setItem('cart',JSON.stringify(cart));
    updateCart();
    updatePopover();


}



function updatePopover(){

  var cart = JSON.parse(localStorage.getItem('cart'));
  var i = 1;
  var popStr = '';
  for(var item in cart)
  {
    popStr = popStr + '<b>' + i + '. </b>' + $('#name'+item).html() + ' , <b>Qty</b> : ' + cart[item] + '<br>';
    i = i + 1;
  }

  popStr = popStr + '<br><a href="/shop/checkout"><button class="btn btn-primary"  id="checkout">Checkout</button></a><button class="btn btn-primary mx-1" id="clearCart" onclick="clearCart()">Clear Cart</button>';
  
  
  $('#popcart').attr('data-content',popStr);
  $('#popcart').popover('show');

}




$('.divpr').on('click','button.cart',function(){

      var cart = JSON.parse(localStorage.getItem('cart'));
      var idstr = this.id.toString();
      if(cart[idstr] != undefined)
      {
          cart[idstr] = cart[idstr] + 1;
      }
      else
      {
          cart[idstr] = 1;
      }

      localStorage.setItem('cart',JSON.stringify(cart));
      updateCart();
      updatePopover();
      var embedString = `<button class="btn btn-primary minus" id="minus${idstr}" > - 
                          </button> <span id="val${idstr}">${cart[idstr]} </span> <button class="btn btn-primary plus" id="plus${idstr}" > + </button>`;
      
      $('#div'+idstr).html(embedString);


});  // end of click



$('.divpr').on('click','button.minus',function(){

        var cart = JSON.parse(localStorage.getItem('cart'));
        var key = this.id.slice(5,);
        cart[key] = cart[key] - 1;
        cart[key] = Math.max(0,cart[key]);
        $('#val'+key).html(cart[key]);
        localStorage.setItem('cart',JSON.stringify(cart));
        updateCart();
        updatePopover();

   });




$('.divpr').on('click','button.plus',function(){

        var cart = JSON.parse(localStorage.getItem('cart'));
        var key = this.id.slice(4,);
        cart[key] = cart[key] + 1;
        $('#val'+key).html(cart[key]);
        localStorage.setItem('cart',JSON.stringify(cart));
        updateCart();
        updatePopover();

   });



///////////////////////// Execution starts from here ////////////////////////////


if(localStorage.getItem('cart') == null)
{
  var cart = {};
  localStorage.setItem('cart',JSON.stringify(cart));
}
else
{
    updateCart();
}


$('#popcart').popover();


updatePopover();



</script>


Implement checkout.html page.

On the checkout page, we need to show the name of the item as well, so we will store the name of the 
item as well while updating the cart and hence we would store the value as an array instead of a 
single value as the value of the cart items.

replace cart[key]  with cart[key][0] and place the name of the item as well :

   if(cart[idstr] != undefined)
      {
          cart[idstr][0] = cart[idstr][0] + 1;
      }
      else
      {
          qty = 1;
          name = $('#name'+idstr).html();
          cart[idstr] = [qty,name];
      }



$.isEmptyObject(cart)   	:  to check for an empty object in jQuery.

Object.keys(cart).length == 0   :  to check for an empty object in javascript.


$('#items').append(string)      :   to append the child items in an "UL" tag.


Create a model named "Order" so that the checkout details can be managed.

class Order(models.Model):
    order_id = models.AutoField(primary_key=True)
    items_json = models.CharField(max_length=5000,default="")
    name = models.CharField(max_length=70,default="")
    email = models.CharField(max_length=70,default="")
    address = models.CharField(max_length=200,default="")
    city = models.CharField(max_length=70,default="")
    state = models.CharField(max_length=70,default="")
    zip_code = models.IntegerField(default=0)
    phone = models.CharField(max_length=20,default="")

    def __str__(self):
        return self.name


Register it in the admin file as well.

change the method and action of the form.

implement a hidden field to store the JSON of the objects.

Code to set the value in the hidden field : 

$('#itemsJson').val(localStorage.getItem('cart'));


Django code can also be used in javascript using  {%   %}

Whenever an object is saved into the database, then only it gets the value of the "AutoField". Before
insertion, no value will be returned as the database provides the value.

Code to know if the POST request is made :

if request.method == "POST":
    isOrderPlaced = True

elif request.method == "GET":
    isOrderPlaced = False 

Code to add an object of "Order" :

order = Order(items_json=items_json,name=name,email=email,address=address,city=city,state=state,zip_code=zip_code,phone=phone)
order.save()
order.order_id      # this will provide the id generated by the database

In html file, use code for checkout :


{% if isOrderPlaced %}

alert(`Thanks for ordering. Your Order Id is  \"{{id}}\" . Use it to track your order.`);
localStorage.clear();
window.location = '/shop/';

{% endif %}


To redirect to a page :    window.location = '/shop/';

To open a pop-up  :  window.open('path');


To manage the homepage opened at the starting of the project :


Apps present in the project are capable enough to render the templates automatically from the folder
present with the name "templates" but the project needs the name in the "DIRS" parameter present in 
its "settings.py".

Add the "templates" name in that file :

'DIRS': ['mac/templates'],

Create a folder with that name inside the project and not in the root directory.

Create a file naming "index.html" inside it 

Then create a "views.py" file inside the project to map the URLs.

Implement it with "index" view.

Import "views.py" in "urls.py" :

from . import views

Add the mapping in "urls.py" :

path('', views.index),

Implement "index" view :


def index(request):
	return render(request,"index.html")

	
Now "http://127.0.0.1:8000/"  will open without any error.


Add a tracker page.


Add an "OrderUpdate" model : 


from django.utils import timezone

class OrderUpdate(models.Model):
    update_id = models.AutoField(primary_key=True)
    order_id = models.IntegerField(default=0)
    update_desc = models.CharField(max_length=5000,default="")
    timestamp = models.DateField(default=timezone.now)
#   timestamp = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.update_desc[0:10] + '...'


"auto_now_add" means automatically add that point of time's details (date and time) if nothing is 
given.


Place an update in the "views.py" :

update = OrderUpdate(order_id=id,update_desc='Your order has been placed.')
update.save()


Add a few updates in the database from admin panel.


Implement "tracker" view as :


def tracker(request):
    if request.method == "POST":
        orderId = request.POST.get('orderId')
        email = request.POST.get('email')
        
        try:
            orderToBeSearched = Order.objects.filter(order_id=orderId,email=email)
            if len(orderToBeSearched) > 0:
                updatesFound = OrderUpdate.objects.filter(order_id=orderId)
                updatesToBeShown = []
                for update in updatesFound:
                    updatesToBeShown.append({ 'text' : update.update_desc , 'time' : update.timestamp })
                response = json.dumps(updatesToBeShown,default=str)
                return HttpResponse(response)
            else:
                return HttpResponse('{}')

        except Exception as e:
            return HttpResponse('{}')

    return render(request,'shop/tracker.html')



Implement AJAX functionality :



$('#trackerForm').submit(function(event){


    $('#items').empty();  // clearing the items if present

    var formData = {

        'orderId' : $('input[name="orderId"]').val(),
        'email' : $('input[name="email"]').val(),
        'csrfmiddlewaretoken' : $('input[name="csrfmiddlewaretoken"]').val()

    };


    $.ajax({

        'type' : 'POST',
        'url' : '/shop/tracker',
        'data' : formData,
        'encode' : true,

    }).done(function(data){

        updates = JSON.parse(data);

        if(updates.length > 0)
        {
            for(var i = 0; i < updates.length ; i++)
            {
                
                let string = `<li class="list-group-item d-flex justify-content-between align-items-center">
                          <h6>${updates[i]['text']}</h6>
                          <span class="badge badge-primary badge-pill">${updates[i]['time']}</span>
                      </li>
              `;
                $('#items').append(string);

            }

        }

        else{
                let string = `<li class="list-group-item d-flex justify-content-between align-items-center">
                          <h6>Sorry! No Updates.<h6>
                          <span class="badge badge-primary badge-pill"></span>
                      </li>
              `;
                $('#items').append(string);       
        }        
    

    });


    event.preventDefault();

});


Use uncompressed version of jQuery in "basic.html" so that the complete form doesn't load


from datetime import date

print(date.today())   # today's date (full)

print(date.today().day)   # today's day

print(date.today().month)   # current month

print(date.today().year)   # current year

from datetime import datetime

print(datetime.now())   # current date and time

print(datetime.now().day)   # today's day

print(datetime.now().month)   # today's month

print(datetime.now().year)   # today's year

print(datetime.now().hour)   # current hour

print(datetime.now().minute)   # current minute

print(datetime.now().second)   # current second


In django :

from django.utils import timezone

print(timezone.now)  		 # current date and time

In python :

from datetime import datetime

print(datetime.now())             # current date and time



To implement billing logic, send the "items_json" as well to the server as : 

response = json.dumps([updatesToBeShown,orderToBeSearched[0].items_json],default=str)

Display the price of the items as well :

<h5 class="card-title">Rs. <span id="pricepr{{ product.id }}">{{ product.price }}</span></h5>


Store the price as well in the cart :

price = parseInt($('#price' + idstr).html());
cart[idstr] = [qty, name, price];


Implement "checkout.html" page : 


if (localStorage.getItem('cart') == null) {

    var cart = {};
    localStorage.setItem('cart', JSON.stringify(cart));

} else {

    var cart = JSON.parse(localStorage.getItem('cart'));
    var sum = 0;
    var totalPrice = 0;

    if ($.isEmptyObject(cart)) {

        let string = `<h6>Sorry! There is no item in the cart.</h6>`;
        $('#items').append(string);

    } else {

        for (var item in cart) {

          var qty = cart[item][0];
          var name = cart[item][1];
          var itemPrice = cart[item][2];

            sum = sum + qty;
            totalPrice = totalPrice + (qty * itemPrice);
            let string = `<li class="list-group-item d-flex justify-content-between align-items-center">
                      ${name}
                      <span class="badge badge-primary badge-pill">${qty}</span>
                  </li>
          `;
            $('#items').append(string);
        }                  //////// end of for loop

      $('#totalPrice').html(totalPrice);
    }       /// end of inner else
    $('#cart').html(sum);

}   ////////// end of outer else


$('#itemsJson').val(localStorage.getItem('cart'));



{% if isOrderPlaced %}

alert(`Thanks for ordering. Your Order Id is  \"{{id}}\" . Use it to track your order.`);
localStorage.clear();
window.location = '/shop/';

{% endif %}

Use "window.location" instead of "document.location".

Implement "window.location" for the "127.0.0.1:8000" page.


Add a "blog" redirection link.


To delete a key value pair from a JSON object : 

delete cart['key'];


Implement blog within "urls.py", "views.py" and "templates" : 

urlpatterns = [
    path('', views.index,name="blogHome"),
    path('blogpost/<int:id>', views.blogpost,name="blogPost"),
]


Create a model with the name "Blogpost" :

Implement "index" and "blogpost" views and "index.html" : 

def index(request):
	myposts = Blogpost.objects.all()
	print(myposts)
	return render(request,'blog/index.html',{ 'myposts' : myposts })


def blogpost(request,id):
	post = Blogpost.objects.filter(post_id=id)[0]
	return render(request, 'blog/blogpost.html',{ 'post' : post })


>>>>>>>>>>>>>>>>>>   Facebook likes, comments and shares integration  <<<<<<<<<<<<<<<<<<<


Paste the "Javascript SDK" obtained from the website in the "basic.html" so that each page can access 
the facebook plugins. 


Paste the plugin wherever we want the comment/like/share plugins.


>>>>>>>>>>>>>>>>>>>>>>>>>> Paytm Payment Integration <<<<<<<<<<<<<<<<<<<<<<<<<<,

Add "amount" attribute in the "Order" class and store it in a hidden field as it also needs to be 
stored in the database and hence manage the "checkout" view as well.


First we will send a POST request to Paytm with the details of the order. Then, Paytm will send us the
response with the status of the transaction. So, we need to create an end-point which accepts POST
request from Paytm by bypassing the "csrf" token. Paytm generates a checksum to make sure that no
tempering has been done with the merchant ID. We will have to verify the checksum as well. 


from django.views.decorators.csrf import csrf_exempt


@csrf_exempt
def handlerequest(request):
    pass


Create a folder named "Paytm" in the current directory of the app and add a "Checksum.py" file inside
it. From github link of Paytm, copy the contents of that file.


pip install pycryptodome


The AES function present in the Checksum.py file expects a 'utf-8' encoded string

Encode the string in both "encode" as well as "decode" functions :

c = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))


Change the following only in "encode" function :

to_encode = c.encrypt(to_encode.encode('utf-8'))



Test by running the "Checksum.py" file only, it must return True.

From the "test.cgi" file of Paytm's github link, copy the param_dict and use it in the checkout 
function


        param_dict = {
            'MID':'WorldP64425807474247',
            'ORDER_ID':'dddgfgfeeed',
            'TXN_AMOUNT':'1',
            'CUST_ID':'acfff@paytm.com',
            'INDUSTRY_TYPE_ID':'Retail',
            'WEBSITE':'worldpressplg',
            'CHANNEL_ID':'WEB',
            #'CALLBACK_URL':'http://localhost/pythonKit/response.cgi',
        }


"CALLBACK_URL" is the URL which will receive the POST request from Paytm :

Change it to :


        param_dict = {
            'MID':'syRCYc29258543697479',             # Your Merchant ID
            'ORDER_ID': str(order.order_id),
            'TXN_AMOUNT': str(amount),
            'CUST_ID': email,
            'INDUSTRY_TYPE_ID':'Retail',
            'WEBSITE':'WEBSTAGING',                   # Used for testing purposes
            'CHANNEL_ID':'WEB',
            'CALLBACK_URL':'http://127.0.0.1:8000/shop/handlerequest'
        }


return render(request,'shop/paytm.html','param_dict' : param_dict)


Create "paytm.html" template.


Use the following form in "paytm.html" file :

<form action="https://securegw-stage.paytm.in/theia/processTransaction" method="post" name="paytm">

    {% for key, value in param_dict.items %}
    <input type="hidden" name="{{key}}" value="{{value}}">
    {% endfor %}

</form>


Test Merchant ID   :   syRCYc29258543697479
Test Merchant Key  :   TkCZbSnD7yAI0@ma

Test Wallet Details :

Mobile Number	   :   7777777777
Password	   :   Paytm12345
OTP                :   489871


Add a key-value pair :


from .Paytm import Checksum

MERCHANT_KEY = 'TkCZbSnD7yAI0@ma'

param_dict['CHECKSUMHASH'] = Checksum.generate_checksum(param_dict,MERCHANT_KEY)

Convert orderId and amount in string.

'ORDER_ID': str(order.order_id),
'TXN_AMOUNT': str(amount),


Implement "handlerequest" view :


@csrf_exempt
def handlerequest(request):
    # Paytm will send POST request to this URL
    if request.method == 'POST':
        form = request.POST
        response_dict = {}
        for key in form.keys():
            response_dict[key] = form[key]
            if key == 'CHECKSUMHASH':
                checksum = form[key]
        verified = Checksum.verify_checksum(response_dict,MERCHANT_KEY,checksum)
        if verified:
            if response_dict['RESPCODE'] == '01':
                print('Order Successful...')
            else:
                print('Sorry! Order was not successful because ' + response_dict['RESPMSG'])
        return render(request,'shop/paymentstatus.html',{ 'response_dict' : response_dict })

    else:
        return HttpResponse("Something went wrong...")


Create a "paymentstatus.html" file :


<div class="container my-5">
<div class="col my-4">

<h2>Payment Status regarding your Order Id :  {{ response_dict.ORDERID }}</h2>

	{% if response_dict.RESPCODE == '01' %}
        <h3 class="my-5">ORDER SUCCESS...</h3>
    {% else %}
        <h3 class="my-5">ORDER FAILURE...</h3>
    {% endif%}


</div>
</div>



(Make sure cart is shown properly at each page)


Implement search functionality by adding a URL and view :

path('search', views.search),

Add "action" and "method" attributes in the form having the "search" button present in the "basic.html"
Add "name" and "id" to the search textbox.


<form class="form-inline my-2 my-lg-0" action="/shop/search" method="post" >
	{% csrf_token %}
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search"
	 name="search" id="search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
</form>


Implement "search.html" file



def searchMatch(query,item):
    query = query.lower()
    if query in item.desc.lower() or query in item.product_name.lower() or query in item.category.lower():
        return True
    else:
        return False


def search(request):
    if request.method == 'POST':
        allProducts = []
        query = request.POST.get('search')
        catProducts = Product.objects.values('category', 'id')
        categories = {item['category'] for item in catProducts}
        for cat in categories:
            prodtemp = Product.objects.filter(category=cat)
            prod = [item for item in prodtemp if searchMatch(query,item)]
            n = len(prod)
            nSlides = n // 4 + ceil(n / 4 - n // 4)
            if n != 0 :
                allProducts.append([prod, range(1, nSlides), n])

        params = {
            'allProducts': allProducts,
            'msg' : ''
        }
        if len(allProducts) == 0 :
            params['msg'] = 'Please make sure to enter relevant query'
        return render(request, 'shop/search.html', params)

    else:
        allProducts = []
        catProducts = Product.objects.values('category', 'id')
        categories = {item['category'] for item in catProducts}
        for cat in categories:
            prod = Product.objects.filter(category=cat)
            n = len(prod)
            nSlides = n // 4 + ceil(n / 4 - n // 4)
            allProducts.append([prod, range(1, nSlides), n])
        params = {
            'allProducts': allProducts
        }
        return render(request, 'shop/index.html', params)





python manage.py changepassword your_username : to change the password of admin



To redirect to a URL :    


from django.shortcuts import redirect

return redirect("/shop")


It is always a good practice to use  "path('', include('home.urls') ),"  always at the end as it 
directly goes to the URLs of the "home.urls" file once reached even if the URL is present below it.


urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', include('blog.urls') ),
    path('mcoder/', views.home ),
    path('share/', views.share ),
    path('', include('home.urls') ),
]


Within the "home.urls" file, use "path('', views.home)," to search for a blank string after the 
localhost URL.


urlpatterns = [
    path('contact/', views.contact ),
    path('about/', views.about ),
    path('share/', views.share ),
    path('share2', views.share2),
    path('', views.home),               
]


In "home.urls", "path('', views.home)," may appear anywhere however its a best practice to place it
at the last.


Manage the templates of the "My Cart" project and place them inside a "templates" folder in the
root directory. Use the name "templates" in the "DIRS" value of the "settings.py" file :


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],



Django messages :

Use following to implement the alert messages (dismissable alerts)


{% for message in messages %}

<div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
  <strong>Message : </strong> {{ message }}
  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">&times;</span>
  </button>
</div>

{% endfor %}


"message.tags" are the tags which will be rendered based on the function we have called.

from django.contrib import messages

messages.success(request, 'Welcome to Contact')

For :

SUCCESS : "success" is rendered
WARNING : "warning" is rendered
ERROR : "error" is rendered

So, in case of success and warning it will work fine as we have the classes with the same name in 
bootstrap. However, for error we need to override the changes in "settings.py" file as we don't have
any bootstrap class with the name "error". We have "danger" class instead.


from django.contrib.messages import constants as messages


MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}


Now, in case of "ERROR" (messages.error()), "danger" will be rendered.


Implement Post Class :

class Post(models.Model):
    sno = models.AutoField(primary_key=True)
    title = models.CharField(max_length=100,default='')
    content = models.TextField(default='')
    author = models.CharField(max_length=50, default='')
    slug = models.CharField(max_length=100, default='')
    timestamp = models.DateTimeField(blank=True)


Use "models.TextField(default='')" in case no limit needs to be set for the characters.

"slug" is the string that is seen in the URL when the page loads

To implement the use of "slug" variable :


path('<str:slug>', views.blogpost),



def blogpost(request,slug):
    post = Post.objects.filter(slug=slug)
    params = { 'post' : post.first() }
    return render(request, "blog/blogpost.html",params)



"/blog/search/" :  whenever the string "search" needs to be used as an end-point


"/blog/search" :  whenever the string "search" needs to be used as a string or a file name


To search for a string, use django's builtin "icontains" :


Post.objects.filter(title__icontains=query)

It means that if the query is present in "title" of the QuerySet object, return it. "icontains" is 
well implemented already and is capable of insensitive search as well.

Post.objects.filter(title__icontains=query,author__icontains=query) :  It means that if the query is 
present in both of the columns i.e. title and author, return the object. So, to implement "OR"
functionality, use : 


titlePosts = Post.objects.filter(title__icontains=query)
contentPosts = Post.objects.filter(content__icontains=query)
authorPosts = Post.objects.filter(author__icontains=query)
allPosts = authorPosts.union(titlePosts.union(contentPosts))


Post.objects.none() :  to create an empty QuerySet of type "Post" in django


Login and Signup functionalities can be done in django using the built-in "User" object :


from django.contrib.auth.models import User


Code to create a user :


myuser = User.objects.create_user(username=username,email=email,password=pass1)
myuser.first_name = fname       # "first_name" and "last_name" also exist for a user
myuser.last_name = lname	# in User table
myuser.save()
messages.success(request,'Your mcoder account has been created successfully')

return redirect('home')   # redirect to the end point having the name="home" in the current app



To implement login and logout :


from django.contrib.auth import authenticate,login,logout



def handleLogin(request):
    if request.method == 'POST':
        loginusername = request.POST.get('loginusername','')
        loginpassword = request.POST.get('loginpassword', '')

        myuser = authenticate(username=loginusername,password=loginpassword)
        if myuser is not None :
            login(request,myuser)
            messages.success(request,'Logged in')
        else:
            messages.error(request, 'Invalid credentials')
        return redirect('home')
    else:
        return HttpResponse('404 - Not Found')



def handleLogout(request):
    logout(request)
    messages.success(request,'Logged out')
    return redirect('home')



While logging in, we are passing a "request" object. That object can be used to verify if the user is 
logged in or not.


{% if request.user.is_authenticated %}


    <button type="button" class="btn btn-success mx-1">
      {{ request.user }}
    </button>

    <a class="dropdown-item" href="/logout/">Logout</a>

{% else %}


{% endif %}


To change the text in "admin" panel :

admin.site.site_header = 'Mcoder Admin'
admin.site.index_title = 'Welcome to Mcoder Admin Panel'

To create Foreign keys, use :

user = models.ForeignKey(User,on_delete=models.CASCADE)

This means that "user" variable would point to a "User" object. In case that "User" object gets 
deleted, all the objects pointing to that object would also get deleted.


If we need to allow insertion of null values as well, use :

parent = models.ForeignKey('self', on_delete=models.CASCADE,null=True)


'self' means that this ("parent") object would point to an object of this ("BlogComment") type only.



class BlogComment(models.Model):
    sno = models.AutoField(primary_key=True)
    comment = models.TextField()
    user = models.ForeignKey(User,on_delete=models.CASCADE)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    parent = models.ForeignKey('self', on_delete=models.CASCADE,null=True)
    timestamp = models.DateTimeField(default=now)


"request.user" would give the "username" of the logged in user as in the "User" class, "__str__" is
implemented in such a way that it returns the "username" of the logged in user



class="w-100 p-2 bg-danger"  >>>>>>    width: 100%; padding: 2px; background-color: red;

border-radius: 15px 50px 30px 5px; ( for all the borders )s

15px >>>>> top left

50px >>>>> top right

30px >>>>> bottom right

5px >>>>> bottom left


class="rounded-circle" in bootstrap is equivalent to "border-radius: 35px"

class="border border-dark" in bootstrap is equivalent to "border: 1px solid black"

class="form-inline" in bootstrap is equivalent to "display: inline-block"


To check for a valid user :

{% if user.is_authenticated %}


{% endif %}



To display time something like "2 days ago" :

add 'django.contrib.humanize' in "setings.py"

add "{% load humanize %}" in the template

use "naturaltime" filter :

{{ post.timestamp|naturaltime }}


To implement "!" in django, "exclude()" can be used :

replies = BlogComment.objects.filter(post=post.first()).exclude(parent=None)



# to display the comments and their replies

def blogpost(request,slug):
    post = Post.objects.filter(slug=slug)
    comments = BlogComment.objects.filter(post=post.first(),parent=None)
    replies = BlogComment.objects.filter(post=post.first()).exclude(parent=None)
    replyDict = {}
    for reply in replies:
        if reply.parent.sno not in replyDict.keys():
            replyDict[reply.parent.sno] = [reply]
        else:    
            replyDict[reply.parent.sno].append(reply)
    params = { 'post' : post.first(), 'comments' : comments, 'user' : request.user, 'replyDict' : replyDict }
    return render(request, "blog/blogpost.html",params)



# to submit comments and replies

def postComment(request):
    if request.method == 'POST':
        comment = request.POST.get('comment','')
        user = request.user
        postSno = request.POST.get('postSno','')
        post = Post.objects.filter(sno=postSno).first()
        parentSno = request.POST.get('parentSno','')
        if parentSno == '':
            postedComment = BlogComment(comment='(Comment) ' + comment,user=user,post=post)
            postedComment.save()
            messages.success(request,'Comment posted successfully')
        else:
            reply = request.POST.get('reply','')
            parent = BlogComment.objects.filter(sno=parentSno).first()
            postedComment = BlogComment(comment='(Reply) ' + reply,user=user,post=post,parent=parent)
            postedComment.save()
            messages.success(request,'Reply posted successfully')
    return redirect(f'/blog/{post.slug}')



Nesting of for loops :


{% for replyParentSno,replyList in replyDict.items %}

   Parent Sno : {{ replyParentSno }}

   {% for reply in replyList  %}

       <p> {{ reply }} </p>

   {% endfor %}

{% endfor %}




Logic to print the replies along with the comments :



{% for replyParentSno,replyList in replyDict.items %}

   Parent Sno : {{ replyParentSno }}

  {% if comment.sno == replyParentSno %}

      {% for reply in replyList  %}

          <p> {{ reply }} </p>

      {% endfor %}

  {% endif %}

{% endfor %}


We cannot create a function in a "views.py" which can be called inside the template directly as :


def getRepliesFromReplyDict(replyDict,comment_sno):
    return replyDict.get(comment_sno)


{% for reply in getRepliesFromReplyDict(replyDict,comment.sno) %}

   {{ reply }}

{% endfor %}


Thats why we need to create custom filters which are capable of doing it.

To create custom filters :

Create a folder with the name "templatetags" in the current app. Name can't be different than it.

Inside it create two files "__init__.py" and "customfilters.py"

Inside "customfilters.py" :


from django import template

register = template.Library()

@register.filter(name='get_val')
def get_val(dct,key):
    return dct.get(key)


"dct" >>>>>  parameter on which the filter is applied

"key" >>>>>  parameter which is supplied to the filter

It can take atmost 2 parameters

{% load customfilters %} in the template


{% for reply in replyDict|get_val:comment.sno %}

    {{ reply.user.username }}

{% endfor %}


Make sure to restart the server


"safe" filter is used to render the text in the HTML mode.


Way to implement foreach loop in Javascript :

  let previews = document.getElementsByClassName('preview');
  	Array.from(previews).forEach( (element) => {
   			element.innerHTML = element.innerText;
  });



"innerText" returns only the text and removes the HTML tags if present while "innerHTML" returns the 
text along with the HTML.


To get the content of the "tinymce" editor, use :

tinyMCE.get('mytextarea').getContent();


To inject the "tinymce" editor in the admin panel, create a folder in the "static" folder and place 
JS file into it. Use the following code to inject custom JS :


var script = document.createElement('script');
script.src = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js';
document.head.append(script);
// myscript.textContent = 'Any text';  ( to set the innerText of the tag generated)

Now, since the JS is added in the "head" tag, "tinymce" variable is now accessible in the console.

In console :

change "#myselector" to "#id_content" :


   tinymce.init({
        selector: '#id_content',

        plugins: [
          'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
          'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking',
          'table emoticons template paste help'
        ],
        toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | ' +
          'bullist numlist outdent indent | link image | print preview media fullpage | ' +
          'forecolor backcolor emoticons | help',
        menu: {
          favs: {title: 'My Favorites', items: 'code visualaid | searchreplace | spellchecker | emoticons'}
        },
        menubar: 'favs file edit view insert format tools table help',
        content_css: 'css/content.css'

      });


This will convert the textarea to the "tinymce" text editor


Now go to "admin.py" and create a class :




@admin.register(Post)              # this means that register the class and inject JS at the same time
class PostAdmin(admin.ModelAdmin):
    class Media:
        js = ('scripts/tinyinject.js',)


"PostAdmin" and "Media" names can't be different.


It will automatically take it from the "static" folder (we have placed inside a "scripts" folder which
is present inside the "static" folder)

Create a JS file in "scripts" folder and implement it as :


var script = document.createElement('script');
script.src = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js';
document.head.append(script);


script.onload = function(){


tinymce.init({
        selector: '#id_content',
        width: 1200,
        height: 800,
        plugins: [
          'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
          'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking',
          'table emoticons template paste help'
        ],
        toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | ' +
          'bullist numlist outdent indent | link image | print preview media fullpage | ' +
          'forecolor backcolor emoticons | help',
        menu: {
          favs: {title: 'My Favorites', items: 'code visualaid | searchreplace | spellchecker | emoticons'}
        },
        menubar: 'favs file edit view insert format tools table help',
        content_css: 'css/content.css'

      });


}



Now, tinymce editor will be displayed in the admin panel.


To resolve indentation problem in sublime :

View > Indentation > Convert indentation to spaces


To configure sublime text for python input :

1. Preferences > Package Control > Install Package > Search "SublimeREPL" and install it

2. Preferences > Key Bindings > Paste the following code

[
    { "keys": ["ctrl+alt+m"], "command": "run_existing_window_command", "args":
    {
        "id": "repl_python_run",
        "file": "config/Python/Main.sublime-menu"
    }}
]


To sort in ascending order in django :   Post.objects.all().order_by('views')

To sort in descending order in django :   Post.objects.all().order_by('-views')  # "-" sign is used

Logic to display top 3 viewed posts : 

Post.objects.all().order_by('-views')[:3]

 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> End of DJANGO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


