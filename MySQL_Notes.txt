
 >>>>>>>>>>>  SQL (Structured Query Language)

It is a language used to query the databases. Its syntax is pre-structured.

PL/SQL (Oracle) : We need to define the structure.


Database : It is a collection of inter-related data. Relations are defined using constraints

Student    belongs to       School

belongs to   >>>>>>>>>>>   relation (constraint)


constraints (6 types)   >>>>>>>>>>   restrictions

vote >>>>>> age has to be greater than or equal to 18

Tables : it is an entity whose specifications need to be discussed.

Eg. Student, Teacher, School etc.

Degree : Number of columns of a table

Cardinality : Number of rows of a table

datatypes : int,char,varchar,float,double,date

Database : first database is installed then its tool will be installed so that database can be queried

constraints :

1. primary key : to uniquely identify the records of a table

2. foreign key : to establish a referential integrity with a column present in a foreign table

3. check : to enforce a constraint on a particular column value

4. unique : to enforce uniqueness of the column values

5. default : to provide a default value to a column

6. not null : to enforce a non-null value to a column


MongoDb : dynamic database (NOSQL is used)

difference between char and varchar

1 bit : 0 or 1

1 byte : 8 bits


char : char(30)  >>>>>>>> Ramesh (6 bytes will be utilized and rest 24 bytes will also be there)

varchar : varchar(30)  >>>>>>>> Ramesh (6 bytes will be utilized and rest 24 bytes will be deallocated)


Single Line comment :      -- single line comment

Multi-Line comment :     

/*

This
is 
multi
line
comment

*/


There are 5 sub-languages in SQL :

1. DDL :

Data Definition Language (create, alter, drop, rename, truncate)

2. DRL/DQL :

Data Retrieval/Query Language (select)

3. DML :

Data Manipulation Language (insert, update, delete)

4. TCL :

Transaction Control Language (commit, rollback, savepoint)

5. DCL :

Data Control Language (grant, revoke)


>>>>>>>>>>>>>>>>>  DDL commands  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>> CREATE <<<<<<<<<<<<<<<<<<<<

To create the database objects like table, procedures, functions, views, triggers, database etc.


show databases

create database db

show databases

use db

create : keyword
table : keyword
tbl : table name


create table tbl     -- DDL command
(
id int,
name varchar(30),
salary float,
address varchar(100)
)


desc tbl :   to peek into the schema of the table 



>>>>>>>>>>>>>>>> ALTER <<<<<<<<<<<<<<<<<<<<<<<

To alter the schema (design) of a database object

To add a column :   ("column" keyword is optional)

alter table tbl
add aadhar varchar(20)

	or

alter table tbl
add column aadhar varchar(20)



To modify a column :   (if column is empty, no problem. Otherwise, column length can be increased only)


("column" keyword is optional)

alter table tbl
modify aadhar varchar(50)

	or

alter table tbl
modify column aadhar varchar(50)


To drop a column :   ("column" keyword is optional)

alter table tbl
drop aadhar

	or

alter table tbl
drop column aadhar



To rename a column :   ("column" keyword is mandatory)

alter table tbl
rename column aadhar to aadharcard


>>>>>>>>>>>>>>>>>>>>>>>> DROP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

To drop the database objects

drop table tbl


>>>>>>>>>>>>>>>>>>>>>>> RENAME <<<<<<<<<<<<<<<<<<<<<<<<<<<

To rename database objects

alter table tbl 
rename to tbl1


>>>>>>>>>>>>>>>>>>>>>>> TRUNCATE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

To delete all the records of the table

truncate table tbl  (can't be rollbacked)

delete from tbl  (can be rollbacked)

(DDL commands can't be rollbacked while DML commands can be rollbacked)

>>>>>>>>>>>>>>>>>>>>  DRL/DQL commands  <<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>> SELECT <<<<<<<<<<<<<<<<<<<<<<<<<<<<

To retrieve the rows of a table

select : keyword
from : keyword

select id      -- only id is returned
from tbl


select id,name      --  id and name are returned
from tbl


select *	  -- all the columns
from tbl


select * 
from tbl
where id = 4      -- only the record with id = 4  (fetching single record)


Aliasing :


select id "My ID", name "My Name", salary "My Salary", address "My Location"
from tbl
where id = 4


or


select id as "My ID", name as "My Name", salary as "My Salary", address as "My Location"
from tbl
where id = 4



>>>>>>>>>>>>>>>>>>>>  DML commands  <<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>> INSERT <<<<<<<<<<<<<<<<<<<<<<<<<<<<

int/float          :   don't use apostrophe ('')

char/varchar/date  :   use apostrophe ('')
To insert the records/rows


insert into tbl values(1,'Amit',50000,'New Delhi')     -- single row insert

insert into tbl values(1,'Amit',50000,'New Delhi'),    -- multi row insert
	              (2,'Sumit',60000,'New Jersey'),     
	              (3,'Puneet',70000,'Yorkshire'),
	              (4,'Rohit',80000,'Chicago'),
	              (5,'Anand',90000,'Torronto')     -- super 30


set sql_safe_updates = 0     -- to turn off the safe mode

set sql_safe_updates = 1     -- to turn on the safe mode again



insert into tbl(id,name,salary) values(1,'Amit',50000)    
 

"auto_increment" :  automatically provides the value for that column. It expects a "primary key"
		    constraint on it


create table tbl     
(
id int auto_increment primary key,     -- column level declaration
name varchar(30),
salary float,
address varchar(100)
)

or

create table tbl     
(
id int auto_increment,     
name varchar(30),
salary float,
address varchar(100),
primary key(id)             -- table level declaration
)



insert into tbl(name,salary,address) values('Amit',50000,'New Delhi')  -- single row insert


insert into tbl(name,salary,address) values('Amit',50000,'New Delhi');
insert into tbl(name,salary,address) values('Sumit',60000,'New Jersey');
insert into tbl(name,salary,address) values('Puneet',70000,'Yorkshire');
  

>>>>>>>>>>>>>>>>>>>>>>>  UPDATE  <<<<<<<<<<<<<<<<<<<<<<<<<

To update the values of the table 


update tbl
set address = 'Yorkshire'     -- updates the address of all the records


update tbl
set address = 'Yorkshire'
where id = 3                  -- updates the address of the record with id = 3

It is recommended to use the primary key column with the "where" clause


update tbl
set address = 'Karachi', name = 'Sumita', salary = salary + 1000    -- updating multiple columns
where id = 4                



update tbl
set salary = salary + 1000           -- updating multiple rows columns
where id > 3                



update tbl
set address = 'Outsider',salary = salary + 1000           -- updating multiple rows and columns
where id >= 3                


>>>>>>>>>>>>>>>>>>>>>>>>>>  DELETE  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

delete from tbl    -- to delete all the rows


delete from tbl
where id = 4       -- to delete custom rows


*** Always turn the safe mode off before using DML commands for more than 1 row


set sql_safe_updates = 0     -- to turn off the safe mode

set sql_safe_updates = 1     -- to turn on the safe mode again


>>>>>>>>>>>>>>>>>>>>>>>>> TCL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Transaction Control Language

commit, rollback, savepoint

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  COMMIT  <<<<<<<<<<<<<<<<<<<<<<<<<<

To make changes permanent in the database done by the transaction

commit


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ROLLBACK  <<<<<<<<<<<<<<<<<<<<<<<<<<

To revert the changes from the database done by the transaction upto last commit

rollback

By default, autocommit is on which will prevent rolling back. So, we need to turn it off :

set autocommit = 0;    -- to turn off autocommit

set autocommit = 1;    -- to turn on autocommit once again


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  SAVEPOINT  <<<<<<<<<<<<<<<<<<<<<<<<<<


savepoint a


To revert the changes from the database done by the transaction upto the savepoint

rollback to savepoint a



>>>>>>>>>>>>>>>>>>>>>>>>>> DCL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Data Control Language

>>>>>>>>>>>>>>>>>>>>>>>>> GRANT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

It is used to grant the privileges to the database users


create user 'anand'@'localhost' identified by 'abc'


select user()       -- to get the currently logged in user


grant all on db to 'anand'@'localhost'    -- grant access to the database only and not the tables

grant all on db.city to 'anand'@'localhost'  -- grant access to the database table "city" only

grant all on db.* to 'anand'@'localhost'  -- grant access to all the database tables



>>>>>>>>>>>>>>>>>>>>>>>>> REVOKE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

It is used to revoke the privileges from the database users


revoke all on db from 'anand'@'localhost'  -- revoke access from the database only and not the tables

revoke all on db.city from 'anand'@'localhost'  -- revoke access from the database table "city" only

revoke all on db.* from 'anand'@'localhost'  -- revoke access from all the database tables


To drop the user :        drop user 'anand'@'localhost'


>>>>>>>>>>>>>>>>>>>>>>>> End of Sub-Languages of SQL  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>  Constraints <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1. Primary key :   To uniquely identify the rows


create table tbl     
(
id int primary key,      -- column level
name varchar(30),
salary float,
address varchar(100)
)

 or

create table tbl     
(

-- Column names

id int,      
name varchar(30),
salary float,
address varchar(100),

-- End of Columns




-- Keys

primary key(id)         -- table level

-- End of keys

)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Foreign Key  :  to establish a "referential integrity" with a column present in a foreign table




customer :  id,name,phone

placed an order to buy shoes

normalization (DBMS concept)

order : orderid, product_name, timestamp, customer_id   

(customer details will be fetched at run-time using joins)


dob : age   (derived attribute)   (never store age. instead, store "dob")


To get the current data and time 

select now()		      -- date and time of the query when it was executed
select sysdate()              -- current date and time
select current_timestamp




select sysdate(),sleep(3),sysdate()

2020-07-18 14:02:21 | 0 | 2020-07-18 14:02:24


select now(),sleep(3),sysdate()

2020-07-18 14:02:21 | 0 | 2020-07-18 14:02:21





create table orders
(

-- Column names

order_id int,
product_name varchar(50),
transaction_time datetime default now(),   
customer_id int,


-- End of Columns




-- Keys

primary key(order_id),
foreign key(customer_id) references customers(id)         -- table level

-- End of keys

)


adding a constraint at run-time,


-- adding a primary key

alter table orders
add primary key(order_id)



-- adding a foreign key

alter table orders
add foreign key(customer_id) references customers(id)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


3. Check : it checks for the condition while insertion of thee records


create table voters
(
id int,
name varchar(50),
age int,
primary key(id),
check(age >= 18 and length(name) >= 6)
)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


4. Not null : to enforce a non-null value to a column


create table tbl
(
id int,
name varchar(50) not null,
age int,
primary key(id)
)



adding "not null" at run-time :

alter table tbl
modify age int not null


adding "null" at run-time :

alter table tbl
modify age int null



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. Default  :  to set the default value to a particular column 


create table tbl
(
id int auto_increment,
name varchar(20) default 'No Name Supplied',
salary float,
pf float default (salary * 0.1),
primary key(id)
)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..

6. Unique :  to enforce uniqueness of the column values


create table tbl
(
id int auto_increment,
name varchar(20),
roll_10th varchar(20),
phone varchar(12) unique,
primary key(id)
)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>> Practice set

CREATE TABLE STUDENTS
(Admno int Primary Key,
Name varchar (20),
Class int,
Sec char (3),
Rno int,
Address varchar (100),
Phone varchar(200)
);



Insert into Students values(1271,'Utkarsh Madaan',12 ,'C', 1 ,'C-32, Punjabi Bagh', '4356154');
Insert into Students values(1324,'Naresh Sharma' ,10 ,'A', 1 ,'31, Mohan Nagar', '435654');
Insert into Students values(1325,'Md.Yusuf', 12 , 'A', 2 ,'12/21, Chand Nagar', '145654');
Insert into Students values(1328,'Sumedha' , 10, 'B', 23 ,'59, Moti Nagar', '4135654');
Insert into Students values(1364,'Subya Akhtar', 11 ,'B', 13 ,'12,Janakpuri', null);
Insert into Students values(1434,'Varuna', 12 , 'B', 21 ,'69,Rohini', null);
Insert into Students values(1461,'David DSouza' , 11, 'B', 1 ,'D-34, Model Town','243554, 99787665');
Insert into Students values(2324,'Satinder Singh' ,12 ,'C', 1 ,'1/2, Gulmohar Park', '143654');
Insert into Students value(2328, 'Peter Jones',10 ,'A', 18 ,'21/32B,Vishal Enclave', '24356154');
Insert into Students values(2371,'Mohini Mehta' ,11 ,'C', 12 ,'37,Raja Garden', '435654, 6765787');





CREATE TABLE SPORTS
(Admno int,
Game varchar(20),
CoachName varchar(30),
Grade char(2),
foreign key(admno) references students(admno)
);


Insert into Sports values(1324,'Cricket', 'Narendra', 'A');
Insert into Sports values(1364,'Volleyball',' M.P. Singh', 'A');
Insert into Sports values(1271,'Volleyball', ' M.P. Singh', 'B');
Insert into Sports values(1434,'Basket Ball', 'I. Malhotra','B');
Insert into Sports values(1461,'Cricket', 'Narendra', 'B');
Insert into Sports values(2328,'Basket Ball', 'I. Malhotra', 'A');
Insert into Sports values(2371, 'Basket Ball', 'I. Malhotra', 'A');
Insert into Sports values(1271, 'Basket Ball','I. Malhotra', 'A');
Insert into Sports values(1434,'Cricket', 'Narendra', 'A');
Insert into Sports values(2328,'Cricket', 'Narendra', 'B');
Insert into Sports values(1364,'Basket Ball','I. Malhotra','B');


create table Loan_Accounts
(
Acc_No int primary key auto_increment,
Cust_Name varchar(20),
Loan_Amount float,
Installments int,
Int_Rate float,
Start_Date date,
Interest float
);



insert into Loan_Accounts(Cust_Name,Loan_Amount,Installments,Int_Rate,Start_Date) 
		   values('R.K.Gupta',300000,36,12,'2009/07/19'),
                         ('S.P.Sharma',500000,48,10,'2008/03/22'),
                         ('K.P.Jain',300000,36,null,'2007/03/08'),
                         ('M.P.Yadav',800000,60,10,'2008/12/06'),
                         ('S.P.Sinha',200000,36,12.5,'2010/01/03'),
                         ('P.Sharma',700000,60,12.5,'2008/06/05'),
                         ('K.S.Dhall',500000,48,null,'2008/03/05');




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Aggregate functions :


select max(loan_amount),min(loan_amount),sum(loan_amount) from loan_accounts

select count(acc_no) from loan_accounts

select count(int_rate) from loan_accounts

select count(*) from loan_accounts   :   to count the number of rows

select avg(loan_amount) from loan_accounts


>>>>>>>>>>>> DISTINCT <<<<<<<<<<<<<<<<<<<<<<

to fetch distinct values of a column 

select distinct name from tbl


>>>>>>>>>>>>> ORDER BY <<<<<<<<<<<<<<<<<<


select loan_amount from loan_accounts
order by loan_amount     -- ascending order by default


select loan_amount from loan_accounts
order by loan_amount asc    -- ascending order

select loan_amount from loan_accounts
order by loan_amount desc    -- descending order


to fetch the first n records using "limit" (plus skip few if required using "offset")

select distinct loan_amount from loan_accounts
order by loan_amount desc   
limit 3 offset 2

>>>>>>>>>>>>>>>>>>> IN operator

select *
from tbl
where id = 2 or id = 4 or id = 12 or id = 34 or id = 89

replace above query by :


select *
from tbl
where id in(2,4,12,34,89)

>>>>>>>>>>>>>>>>>>>>>>>>>>  LIKE  <<<<<<<<<<<<<<<

used for wild card search


name starts with 's'

name contains 's'

name ends with 's'


%   :  any number of characters ( 0 or more )


_   :  only 1 character


select *
from loan_accounts
where cust_name like 'p%'    -- name starts with 'p' or 'P'   (case insensitive)


select *
from loan_accounts
where cust_name like '%p'    -- name ends with 'p' or 'P'   (case insensitive)


select *
from loan_accounts
where cust_name like '%p%'    -- name contains 'p' or 'P'   (case insensitive)


select *
from loan_accounts
where cust_name like '_p%'    -- name starts with 1 character and a 'p' or 'P' and contains some or
				 0 characters after that  (case insensitive)


select *
from loan_accounts
where cust_name like '%yadav%'  -- name contains "yadav" or "YADAV"


>>>>>>>>>>>>>>>>>>>>>> JOINS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Joins are used to fetch the records from multiple tables at run time.

We would study just the equi-join as per syllabus.

Equi-join : We match the records by the equality.


create table dept
(
id int,
name varchar(20),
location varchar(30),
primary key(id)
)


insert into dept values(101,'IT','Dallas');
insert into dept values(102,'Payroll','Texas');
insert into dept values(103,'HR','Chicago');
insert into dept values(104,'Admin','California');
insert into dept values(105,'Management','New York');



create table emp
(
id int,
name varchar(20),
salary float,
deptid int,
primary key(id),
foreign key(deptid) references dept(id)
)




insert into emp values(201,'Amit',50000,102);
insert into emp values(202,'Sumit',60000,103);
insert into emp values(203,'Puneet',70000,105);
insert into emp values(204,'Rohit',80000,101);
insert into emp values(205,'Rocky',90000,101);
insert into emp values(206,'Aman',100000,104);
insert into emp values(207,'Bhuvan',40000,null);
insert into emp values(208,'Ashish',30000,null);



To fetch multiple columns from a table without using the actual table name, use aliasing :


select e.id,e.name "Employee Name",e.salary,d.name "Department Name",d.location
from emp e,dept d
where e.deptid = d.id;




To fetch all the columns from a table, use "*" :

select e.*,d.name "Department Name",d.location
from emp e,dept d
where e.deptid = d.id;



To fetch on multiple conditions, use "and" :

select e.*,d.name "Department Name",d.location
from emp e,dept d
where e.deptid = d.id and e.salary > 50000 and e.deptid = 101 and e.name like '%h%'


>>>>>>>>>>>>>>>>>>>>>>> Scalar functions <<<<<<<<<<<<<<<<<<<<<<<<

select length('rohit');
select lower('RoHiT');
select upper('rohit');
select length('   rohit  '),length(ltrim('   rohit  ')),length(rtrim('   rohit  ')),length(trim('   rohit  '));
select left('rohit',3);
select right('rohit',3);
select mid('anandita',5,4),substr('anandita', 5, 4),substring('anandita', 5, 4);    -- 5 : starting index, 4 : count and not index
select concat('I am ', concat( concat('saurav',' kumar'),' sharma'));
select concat('I am ','saurav',' kumar',' sharma');
select pow(23,2),power(44,2);   --  529 | 1936
select sysdate(),now(),curdate(),current_date(),current_time(),curtime(),current_timestamp();
select day(curdate()),month(curdate()),year(curdate()),dayname(curdate()),monthname(curdate());
select 'rohit',sleep(5),'sharma';





select round(1234.5678,2);     -- 1234.57
select round(1234.5678,1);     -- 1234.6
select round(1234.5648,2);     -- 1234.56
select round(1234.5658,2);     -- 1234.57    (check : right , effect : current)
select round(1234.5378,1);     -- 1234.5
select round(1234.5678,0);     -- 1235
select round(1234.4678,0);     -- 1234
select round(1234.5678,-1);     -- 1230      (check : current , effect : left)
select round(1236.5678,-1);     -- 1240
select round(1234.5678,-2);     -- 1200
select round(1254.5678,-2);     -- 1300



select truncate(1234.5678,2);     -- 1234.56
select truncate(1234.5678,1);     -- 1234.5
select truncate(1234.5648,2);     -- 1234.56
select truncate(1234.5658,2);     -- 1234.56   
select truncate(1234.5378,1);     -- 1234.5
select truncate(1234.5678,0);     -- 1234
select truncate(1234.4678,0);     -- 1234
select truncate(1234.5678,-1);     -- 1230      
select truncate(1236.5678,-1);     -- 1230
select truncate(1234.5678,-2);     -- 1200
select truncate(1254.5678,-2);     -- 1200


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CASE :  alternate of if-else


-- Maximum of two marks  (use column name after "when") 

select t.*,case when marks2 > marks3 
		then marks2
		else marks3 
		end "Highest" 
from t;



-- Maximum of three marks  (use column name after "when") 

select t.*,case when marks1 > 
			      case when marks2 > marks3 
				   then marks2 
				   else marks3 
				   end
                then marks1 
                else 
			case when marks2 > marks3 
			     then marks2 
                             else marks3
			     end 
                end "Highest" from t





If column to be checked would remain same for every condition check, use column name before "when" :


select t.*,case grade when 'A' then '90 < marks < 100'
		      when 'B' then '80 < marks < 90'
		      when 'C' then '70 < marks < 80'
		      when 'D' then '60 < marks < 70'
                      end "Marks converter"
from t;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>> GROUP BY <<<<<<<<<<<<<<<<<<<<<

It is used to logically divide the table into the groups and perform required operations on those
individual groups.


create table persons
(
id int,
name varchar(20),
salary float,
gender varchar(6)
);


insert into persons values(1,'amit',1000,'Male');
insert into persons values(2,'sumit',2000,'Male');
insert into persons values(3,'puneet',3000,'Male');
insert into persons values(4,'reena',4000,'Female');
insert into persons values(5,'heena',5000,'Female');
insert into persons values(6,'meena',6000,'Female');


select * from persons;

----------------------------------------------------


select gender,max(salary) "Maximum Salary",min(salary) "Minimum Salary"
from persons
group by gender                


Male	3000	1000
Female	6000	4000

--------------------------------------------------------

select gender,max(salary) "Maximum Salary",min(salary) "Minimum Salary"
from persons
group by gender                
having max(salary) > 5000


Female	6000	4000

--------------------------------------------------------

select gender,max(salary) "Maximum Salary",min(salary) "Minimum Salary"
from persons
where id not in (3,5)    
group by gender                


Male	2000	1000
Female	6000	4000

----------------------------------------------------------

select gender,max(salary) "Maximum Salary",min(salary) "Minimum Salary"
from persons
where id not in (3,5)    
group by gender                
having max(salary) > 5000


Female	6000	4000

-------------------------------------------------------------

>>>>>>>>>>>>>>>>>>>>>  END OF SQL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>  RDBMS  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Data Manage : CRUD operation ( Create, Read, Update, Delete )

File System : Used to manage the data in the form of files

(Bank)

PrimeCustomers : id,name,father's name, spouse, address, phone, email

EdgeCustomers : id,name,father's name, spouse, address, phone, email

NormalCustomers : id,name,father's name, spouse, address, phone, email

(School)

Staff, Students, Book

Computer : sno, title, author, no_of_pages

Science : sno, title, author, no_of_pages

Student : id, name, book_issue, doi, sno, title, author, no_of_pages

Staff : id, name, book_issue, doi, sno, title, author, no_of_pages


Data management was quite tough as we had to manually manage the details and there were chances of 
Data redundancy(presence of duplicate data), loss of data integrity(inconsistent data).



DBMS : Database Management System (data would be placed on a single place). Key rule was to establish 
       centralized data.


DBMS is a system which overcame the demerits of File Mangement System.


** types of database models 

** files vs dbms


RDBMS : DBMS which uses tables to store the data. Eg. MySQL, Oracle, SQL Server, PostgreSQL, DB2 etc.
	
Types of relations :

1. One to one : 1 tutor teaches 1 student

2. Many to one : many students are taught by 1 tutor

3. Many to many : patients are operated by different doctors

Types of keys :

1. Primary key

2. Foreign key

3. Candidate key

4. Alternate key

5. Composite key : primary key is made by the combination of more than 1 columns


create table tbl     
(
id int auto_increment,     
name varchar(30),
salary float,
address varchar(100),
phone varchar(15),
primary key(id,phone)            -- composite key
)


post : tutor requirement

10 calls : candidate keys

1 person : decided (primary key)

Rest 9 people :  ok from my side (alternate keys)





>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> End of MySQL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


