
It is used to plot different types of data on different types of graphs so that data visualization can
be done.

pip install matplotlib 

from matplotlib import pyplot as plt


# Median Developer Salaries by Age

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

plt.plot(ages_x,dev_y)   # ages_x > x-axis
			#  dev_y > y-axis

plt.show()   # to show the graph


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  setting the labels  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries')  	    # to set the label of graph
plt.plot(ages_x,dev_y) 
plt.show()


# Median Python Developer Salaries by Age

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph
plt.plot(ages_x,py_dev_y) 
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>> plotting comparison graphs <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

plt.plot(ages_x,dev_y) 
plt.plot(ages_x,py_dev_y) 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting legend values (labels) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

plt.legend(['All Developers','Python Developers'])

legends are given in the order they were added to the plot function

>>>>>>> Code :

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

plt.plot(ages_x,dev_y) 
plt.plot(ages_x,py_dev_y) 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph

plt.legend(['All Developers','Python Developers'])

plt.show()


but instead of it, use "label" parameter : 

plt.plot(ages_x,dev_y,label='All Devs') 
plt.plot(ages_x,py_dev_y,label='Python Devs') 


>>>>>>>> Code : 

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

plt.plot(ages_x,dev_y,label='All Devs') 
plt.plot(ages_x,py_dev_y,label='Python Devs') 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph

plt.legend()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>> setting format of lines <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

linestyle : to set the linestyle
color : to set the color 
marker : to set the marker on the points
linewidth : to set the width of the line

plt.plot(ages_x,dev_y,label='All Devs',linestyle='--',color='b',marker='.') 


Code :

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

plt.plot(ages_x,dev_y,label='All Devs',linestyle='--',color='b',marker='.',linewidth=3) 

#plt.plot(ages_x,dev_y,label='All Devs',linestyle='--',color='b',marker='o') 

plt.plot(ages_x,py_dev_y,label='Python Devs') 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph

plt.legend()

plt.tight_layout()    #  to give some padding

plt.grid(True)  # to set the gridlines

# print(plt.style.available)  # to get the available styles

plt.style.use('fivethirtyeight')  # to set the style

plt.savefig('plot.png')  # to save the graph on the disk

#plt.savefig('C:\\Users\\Roshaa-PC\\Desktop\\plot3.png')  # to save the graph on the disk

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting bar graphs <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

use "bar" instead of "plot" and remove marker attribute


ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

plt.bar(ages_x,dev_y,label='All Devs',linestyle='--',color='b',linewidth=3) 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python developers')  	    # to set the label of graph

plt.legend()

plt.tight_layout()    #  to give some padding

plt.grid(True)  # to set the gridlines

# print(plt.style.available)  # to get the available styles

plt.style.use('fivethirtyeight')  # to set the style

#plt.savefig('plot.png')  # to save the graph on the disk

#plt.savefig('C:\\Users\\Roshaa-PC\\Desktop\\plot3.png')  # to save the graph on the disk

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting comparison bar graphs <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


import numpy as np

ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]

dev_y = [38496, 42000, 46752, 49320, 53200,
         56000, 62316, 64928, 67317, 68748, 73752]

py_dev_y = [45372, 48876, 53850, 57287, 63016,
            65998, 70003, 70000, 71496, 75370, 83640]

# Median JavaScript Developer Salaries by Age
js_dev_y = [37810, 43515, 46823, 49293, 53437,
            56373, 62375, 66674, 68745, 68746, 74583]

width = 0.25

x_indexes = np.arange(len(ages_x))

plt.bar(x_indexes-width,dev_y,label='All Devs',color='c',width=width) 

plt.bar(x_indexes,py_dev_y,label='Python Devs',color='k',width=width) 

plt.bar(x_indexes+width,js_dev_y,label='Javascript Devs',color='y',width=width) 

plt.xlabel('Ages')                  #  to set the label of x-axis
plt.ylabel('Median Salary in USD')  # to set the label of y-axis
plt.title('Median Salaries of Python vs Javascript vs All developers')  	    # to set the label of graph

plt.legend()

#plt.tight_layout()    #  to give some padding

plt.grid(True)  # to set the gridlines

# print(plt.style.available)  # to get the available styles

plt.style.use('fivethirtyeight')  # to set the style

#plt.savefig('plot.png')  # to save the graph on the disk

#plt.savefig('C:\\Users\\Roshaa-PC\\Desktop\\plot3.png')  # to save the graph on the disk

plt.xticks(ticks=x_indexes,labels=ages_x)  # to set the labels of x-axis

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting graph from real world data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> reading a .csv file using .csv module <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import numpy as np
import csv
from matplotlib import pyplot as plt

with open('data/data.csv') as csv_file:
    csv_reader = csv.DictReader(csv_file)
    row = next(csv_reader)

row['LanguagesWorkedWith']


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> using counter module <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from collections import Counter

c = Counter(['Python','Java','C++'])
print(c)
c.update(['Python','Swift'])
print(c)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> cleaning data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import numpy as np
import csv
from matplotlib import pyplot as plt

with open('data/data.csv') as csv_file:
    csv_reader = csv.DictReader(csv_file)
    language_counter = Counter()
    for row in csv_reader:
        language_counter.update(row['LanguagesWorkedWith'].split(';'))

languages = []
popularities = []

for language,popularity in language_counter.most_common(15):
    languages.append(language)
    popularities.append(popularity)

languages.reverse()
popularities.reverse()

#print(languages)
#print(popularities)

plt.barh(languages,popularities)	# using a horizontal bar graph
plt.xlabel('Popularity')       
plt.ylabel('Programming Languages')  
plt.title('Most popular languages')  	


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> doing the same thing with pandas <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import numpy as np
import csv
from matplotlib import pyplot as plt
import pandas as pd

data = pd.read_csv('data/data.csv')
ids = data['Responder_id']
lang_responses = data['LanguagesWorkedWith']
language_counter = Counter()
for response in lang_responses:
    language_counter.update(response.split(';'))

languages = []
popularities = []

for language,popularity in language_counter.most_common(15):
    languages.append(language)
    popularities.append(popularity)

languages.reverse()
popularities.reverse()

#print(languages)
#print(popularities)

plt.barh(languages,popularities)	# using a horizontal bar graph
plt.xlabel('Popularity')       
plt.ylabel('Programming Languages')  
plt.title('Most popular languages')  	


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting pie charts <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from matplotlib import pyplot as plt

slices = [60,40,30,20]                # values need not add to 100. proportions will be done by pie chart automatically
labels = ['Sixty','Forty','Thirty','Twenty']
colors = ['blue','red','yellow','green']
plt.pie(slices,labels=labels,colors=colors,wedgeprops={'edgecolor' : 'black'})
plt.title('My Pie Chart')  	
plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting real world data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from matplotlib import pyplot as plt

slices = [59219, 55466, 47544, 36443, 35917, 31991, 27097, 23030, 20524, 18523, 18017, 7920, 7331, 7201, 5833]
labels = ['JavaScript', 'HTML/CSS', 'SQL', 'Python', 'Java', 'Bash/Shell/PowerShell', 'C#', 'PHP', 'C++', 'TypeScript', 'C', 'Other(s):', 'Ruby', 'Go', 'Assembly']
plt.pie(slices,labels=labels,wedgeprops={'edgecolor' : 'black'})
plt.title('My Pie Chart')  	
plt.show()


# pie charts are not recommended to use for more than 4-5 labels


>>>>>>>>>>>>>> putting emphasis on a particular piece using "explode" <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from matplotlib import pyplot as plt

slices = [59219, 55466, 47544, 36443, 35917]
labels = ['JavaScript', 'HTML/CSS', 'SQL', 'Python', 'Java']
explode = [0,0,0,0.1,0]
plt.pie(slices,labels=labels,wedgeprops={'edgecolor' : 'black'},
        explode=explode,shadow=True,startangle=90,autopct='%1.2f%%')
plt.title('My Pie Chart')  	
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting stack plots <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from matplotlib import pyplot as plt

plt.style.use("fivethirtyeight")

minutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]

player1 = [1, 2, 3, 3, 4, 4, 4, 4, 5]
player2 = [1, 1, 1, 1, 2, 2, 2, 3, 4]
player3 = [1, 1, 1, 2, 2, 2, 3, 3, 3]

labels = ['player1', 'player2', 'player3']
colors = ['red', 'blue', 'yellow']

plt.stackplot(minutes, player1, player2, player3, labels=labels, colors=colors)

plt.legend(loc='upper left')

plt.title("My Awesome Stack Plot")
plt.tight_layout()
plt.show()


# stack plots can be used to plot the data where total will remain same in each case. Eg. job hours 
in a month


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting a real time data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


from matplotlib import pyplot as plt

plt.style.use("fivethirtyeight")

minutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]

player1 = [8, 6, 5, 5, 4, 2, 1, 1, 0]
player2 = [0, 1, 2, 2, 2, 4, 4, 4, 4]
player3 = [0, 1, 1, 1, 2, 2, 3, 3, 4]

labels = ['player1', 'player2', 'player3']
colors = ['red', 'blue', 'yellow']

plt.stackplot(minutes, player1, player2, player3, labels=labels, colors=colors)

plt.legend(loc=(0.07, 0.05))    # to set a particular location of legend (7% from left, 5% from bottom)

plt.title("My Awesome Stack Plot")
plt.tight_layout()
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> filling areas <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv('data/data2.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

plt.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

plt.plot(ages, py_salaries, label='Python')

overall_median = 57287

plt.fill_between(ages,py_salaries,		# to fill the area under the curve
		 alpha=0.25)			# "alpha" is to set the brightness of the fill
	
plt.legend()

plt.title('Median Salary (USD) by Age')
plt.xlabel('Ages')
plt.ylabel('Median Salary (USD)')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> setting filling areas with median <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv('data/data2.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

plt.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

plt.plot(ages, py_salaries, label='Python')

overall_median = 57287

plt.fill_between(ages,py_salaries,			# to fill the area under the curve
		 alpha=0.25,y2=overall_median)		# "alpha" is to set the brightness of the fill
						
plt.legend()

plt.title('Median Salary (USD) by Age')
plt.xlabel('Ages')
plt.ylabel('Median Salary (USD)')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>> setting conditional filling areas with color coding <<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv('data/data2.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

plt.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

plt.plot(ages, py_salaries, label='Python')

overall_median = 57287

plt.fill_between(ages,py_salaries,			# to fill the area under the curve
		 alpha=0.25,y2=overall_median,		# "alpha" is to set the brightness of the fill
		where=(py_salaries > overall_median),
		color='green')			        # to set the conditional fill
						 	
plt.fill_between(ages,py_salaries,			# to fill the area under the curve
		 alpha=0.25,y2=overall_median,		# "alpha" is to set the brightness of the fill
		where=(py_salaries <= overall_median),
		color='red')   				# to set the conditional fill
			
plt.legend()

plt.title('Median Salary (USD) by Age')
plt.xlabel('Ages')
plt.ylabel('Median Salary (USD)')

plt.tight_layout()

plt.show()


>>>>>>>>>>>> setting conditional filling areas with color coding with another plot <<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv('data/data2.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

plt.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

plt.plot(ages, py_salaries, label='Python')

overall_median = 57287

plt.fill_between(ages,py_salaries,			# to fill the area under the curve
		 alpha=0.25,y2=dev_salaries,		# "alpha" is to set the brightness of the fill
		where=(py_salaries > dev_salaries),
		color='green',label='Above Avg')			        # to set the conditional fill
						 	
plt.fill_between(ages,py_salaries,			# to fill the area under the curve
		 alpha=0.25,y2=dev_salaries,		# "alpha" is to set the brightness of the fill
		where=(py_salaries <= dev_salaries),
		color='red',label='Below Avg')   				# to set the conditional fill
			
plt.legend()

plt.title('Median Salary (USD) by Age')
plt.xlabel('Ages')
plt.ylabel('Median Salary (USD)')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting histograms <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('fivethirtyeight')

ages = [18, 19, 21, 25, 26, 26, 30, 32, 38, 45, 55]

#plt.hist(ages,bins=5,edgecolor='black')     # it automatically creates 5 bins as per itself

bins = [10,20,30,40,50,60,70,80]

plt.hist(ages,bins=bins,edgecolor='black')     # to create our custom bins


# data = pd.read_csv('data.csv')
# ids = data['Responder_id']
# ages = data['Age']

# median_age = 29
# color = '#fc4f30'

# plt.legend()

plt.title('Ages of Respondents')
plt.xlabel('Ages')
plt.ylabel('Total Respondents')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting histograms of a real world data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('fivethirtyeight')

bins = [10,20,30,40,50,60,70,80]

plt.hist(ages,bins=bins,edgecolor='black',log=True)     # to create our custom bins

data = pd.read_csv('data/data3.csv')
ids = data['Responder_id']
ages = data['Age']

median_age = 29
color = '#fc4f30'

plt.axvline(median_age,color=color,label='Median Age',linewidth=2)     # to see the median

plt.legend()

plt.title('Ages of Respondents')
plt.xlabel('Ages')
plt.ylabel('Total Respondents')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting scatter plots <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

x = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]
y = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]

plt.scatter(x,y,s=100,c='green',marker='X',
	    edgecolor='black',linewidth=1,alpha=0.75)    # s : size of dots , c : color

# colors = [7, 5, 9, 7, 5, 7, 2, 5, 3, 7, 1, 2, 8, 1, 9, 2, 5, 6, 7, 5]

# sizes = [209, 486, 381, 255, 191, 315, 185, 228, 174,
#          538, 239, 394, 399, 153, 273, 293, 436, 501, 397, 539]

# data = pd.read_csv('2019-05-31-data.csv')
# view_count = data['view_count']
# likes = data['likes']
# ratio = data['ratio']

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting the feedback ratings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

x = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]
y = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]
colors = [7, 5, 9, 7, 5, 7, 2, 5, 3, 7, 1, 2, 8, 1, 9, 2, 5, 6, 7, 5]

plt.scatter(x,y,s=100,c=colors,cmap='Greens',             # cmap : colormap of the dots
	    edgecolor='black',linewidth=1,alpha=0.75)    # s : size of dots , c : color

plt.colorbar().set_label('Satisfaction')

# sizes = [209, 486, 381, 255, 191, 315, 185, 228, 174,
#          538, 239, 394, 399, 153, 273, 293, 436, 501, 397, 539]

# data = pd.read_csv('2019-05-31-data.csv')
# view_count = data['view_count']
# likes = data['likes']
# ratio = data['ratio']

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting with different sizes <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

x = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]
y = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]
colors = [7, 5, 9, 7, 5, 7, 2, 5, 3, 7, 1, 2, 8, 1, 9, 2, 5, 6, 7, 5]
sizes = [209, 486, 381, 255, 191, 315, 185, 228, 174,
          538, 239, 394, 399, 153, 273, 293, 436, 501, 397, 539]

plt.scatter(x,y,s=sizes,c=colors,cmap='Greens',             # cmap : colormap of the dots
	    edgecolor='black',linewidth=1,alpha=0.75)    # s : size of dots , c : color

plt.colorbar().set_label('Satisfaction')

# data = pd.read_csv('2019-05-31-data.csv')
# view_count = data['view_count']
# likes = data['likes']
# ratio = data['ratio']

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting real time data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/2019-05-31-data.csv')
view_count = data['view_count']
likes = data['likes']
ratio = data['ratio']

plt.scatter(view_count,likes,edgecolor='black',linewidth=1,alpha=0.75)   

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting real time data on log scale <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/2019-05-31-data.csv')
view_count = data['view_count']
likes = data['likes']
ratio = data['ratio']

plt.scatter(view_count,likes,edgecolor='black',linewidth=1,alpha=0.75)   

plt.xscale('log')
plt.yscale('log')

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting with ratios <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/2019-05-31-data.csv')
view_count = data['view_count']
likes = data['likes']
ratio = data['ratio']

plt.scatter(view_count,likes,edgecolor='black',
	    c=ratio,cmap='summer',linewidth=1,alpha=0.75)   

plt.xscale('log')    # to plot on log scale
plt.yscale('log')

plt.colorbar().set_label('Likes/Dislikes Ratio')

# plt.title('Trending YouTube Videos')
# plt.xlabel('View Count')
# plt.ylabel('Total Likes')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting time series data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
from matplotlib import dates as mpl_dates

plt.style.use('seaborn')

dates = [
    datetime(2019, 5, 24),
    datetime(2019, 5, 25),
    datetime(2019, 5, 26),
    datetime(2019, 5, 27),
    datetime(2019, 5, 28),
    datetime(2019, 5, 29),
    datetime(2019, 5, 30)
]

y = [0, 1, 3, 4, 6, 5, 7]

plt.plot_date(dates,y,linestyle='solid')

# data = pd.read_csv('data.csv')
# price_date = data['Date']
# price_close = data['Close']

# plt.title('Bitcoin Prices')
# plt.xlabel('Date')
# plt.ylabel('Closing Price')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> rotating dates for adjustment <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
from matplotlib import dates as mpl_dates

plt.style.use('seaborn')

dates = [
    datetime(2019, 5, 24),
    datetime(2019, 5, 25),
    datetime(2019, 5, 26),
    datetime(2019, 5, 27),
    datetime(2019, 5, 28),
    datetime(2019, 5, 29),
    datetime(2019, 5, 30)
]

y = [0, 1, 3, 4, 6, 5, 7]

plt.plot_date(dates,y,linestyle='solid')

plt.gcf().autofmt_xdate()            # to rotate date so that they get fitted properly

# data = pd.read_csv('data.csv')
# price_date = data['Date']
# price_close = data['Close']

# plt.title('Bitcoin Prices')
# plt.xlabel('Date')
# plt.ylabel('Closing Price')

plt.tight_layout()

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> setting the date format <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
from matplotlib import dates as mpl_dates

plt.style.use('seaborn')

dates = [
    datetime(2019, 5, 24),
    datetime(2019, 5, 25),
    datetime(2019, 5, 26),
    datetime(2019, 5, 27),
    datetime(2019, 5, 28),
    datetime(2019, 5, 29),
    datetime(2019, 5, 30)
]

y = [0, 1, 3, 4, 6, 5, 7]

plt.plot_date(dates,y,linestyle='solid')

plt.gcf().autofmt_xdate()            # to rotate date so that they get fitted properly

date_format = mpl_dates.DateFormatter('%b, %d %Y')       # to create the format
plt.gca().xaxis.set_major_formatter(date_format)	 # to set the format

# data = pd.read_csv('data.csv')
# price_date = data['Date']
# price_close = data['Close']

# plt.title('Bitcoin Prices')
# plt.xlabel('Date')
# plt.ylabel('Closing Price')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting the real time data <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
from matplotlib import dates as mpl_dates

plt.style.use('seaborn')

data = pd.read_csv('data/data4.csv')

data['Date'] = pd.to_datetime(data['Date'])
data.sort_values(by='Date',inplace=True)

price_date = data['Date']
price_close = data['Close']

plt.plot_date(price_date,price_close,linestyle='solid')
plt.gcf().autofmt_xdate()            # to rotate date so that they get fitted properly

plt.title('Bitcoin Prices')
plt.xlabel('Date')
plt.ylabel('Closing Price')

plt.tight_layout()

plt.show()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting sample data after each second <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

from itertools import count
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

index = count()   	# setting the count variable
#value = next(index)     # returns the current value of the count variable and then the counter is incremented

x_vals = []
y_vals = []

def animate(index):
    x_vals.append(next(index))
    y_vals.append(random.randint(0,5))
    plt.cla()			#  to clear the previous graph
    plt.plot(x_vals,y_vals)

ani = FuncAnimation(plt.gcf(),animate,interval=1000)

plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> writing a random data into a .csv file <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import csv
import random
import time

x_value = 0
total_1 = 1000
total_2 = 1000

fieldnames = ["x_value", "total_1", "total_2"]


with open('data/data8.csv', 'w') as csv_file:
    csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    csv_writer.writeheader()

while True:

    with open('data/data8.csv', 'a') as csv_file:
        csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        info = {
            "x_value": x_value,
            "total_1": total_1,
            "total_2": total_2
        }

        csv_writer.writerow(info)
        print(x_value, total_1, total_2)

        x_value += 1
        total_1 = total_1 + random.randint(-6, 8)
        total_2 = total_2 + random.randint(-5, 6)

    time.sleep(1)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>> reading from that .csv file <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# first run the data generator file and then run the following code. Do not close data generator file.

import random
from itertools import count
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

plt.style.use('fivethirtyeight')

def animate(i):
    data = pd.read_csv('data/data8.csv')
    x = data['x_value']
    y1 = data['total_1']
    y2 = data['total_2']

    plt.cla()

    plt.plot(x, y1, label='Channel 1')
    plt.plot(x, y2, label='Channel 2')

    plt.legend(loc='upper left')
    plt.tight_layout()


ani = FuncAnimation(plt.gcf(), animate, interval=1000)

plt.tight_layout()
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting subplots <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


A figure is a container which may have multiple subplots inside it which are known as Axes. By 
default, we get 1 axis in a figure (1*1 i.e. 1 row 1 column).


>>>>>>>>>>>>>>>>>>>>>>>>>>>>> subplots in an OOPS way <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/data9.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

fig, ax = plt.subplots()        # it returns a figure and an axis (1 axis by default of size 1*1)

ax.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')
ax.plot(ages, py_salaries, label='Python')
ax.plot(ages, js_salaries, label='JavaScript')

ax.legend()
ax.set_title('Median Salary (USD) by Age')
ax.set_xlabel('Ages')
ax.set_ylabel('Median Salary (USD)')

plt.tight_layout()
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting multiple subplots in a figure <<<<<<<<<<<<<<<<<<<<<<<<<<<<


import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/data9.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

fig, (ax1,ax2) = plt.subplots(nrows=2,ncols=1,sharex=True)    # "sharex" will share x-axis labels with all the axes

ax1.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

ax2.plot(ages, py_salaries, label='Python')
ax2.plot(ages, js_salaries, label='JavaScript')

ax1.legend()
ax1.set_title('Median Salary (USD) by Age')
#ax1.set_xlabel('Ages')
ax1.set_ylabel('Median Salary (USD)')

ax2.legend()
#ax2.set_title('Median Salary (USD) by Age')
ax2.set_xlabel('Ages')
ax2.set_ylabel('Median Salary (USD)')

plt.tight_layout()
plt.show()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> plotting multiple figures <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


import pandas as pd
from matplotlib import pyplot as plt

plt.style.use('seaborn')

data = pd.read_csv('data/data9.csv')
ages = data['Age']
dev_salaries = data['All_Devs']
py_salaries = data['Python']
js_salaries = data['JavaScript']

fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()

ax1.plot(ages, dev_salaries, color='#444444',
         linestyle='--', label='All Devs')

ax2.plot(ages, py_salaries, label='Python')
ax2.plot(ages, js_salaries, label='JavaScript')

ax1.legend()
ax1.set_title('Median Salary (USD) by Age')
#ax1.set_xlabel('Ages')
ax1.set_ylabel('Median Salary (USD)')

ax2.legend()
#ax2.set_title('Median Salary (USD) by Age')
ax2.set_xlabel('Ages')
ax2.set_ylabel('Median Salary (USD)')

plt.tight_layout()
plt.show()

fig1.savefig('figure1.png')
fig2.savefig('figure2.png')



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> End of Matplotlib <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


